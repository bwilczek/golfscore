{"version":3,"sources":["HoleScore.js","Player.js","Holes.js","App.js","serviceWorker.js","index.js"],"names":["HoleScore","color","this","props","holeWon","fontWeight","style","score","Button","margin","width","size","disabled","onClick","decrement","increment","React","Component","Player","newName","prompt","setName","totalScore","sum","Object","values","player","scores","holesWon","length","promptRename","bind","name","keys","map","hole","includes","key","incrementScore","decrementScore","Holes","paddingRight","App","state","players","1","2","3","4","5","6","7","8","9","newState","remove","n","parseInt","push","index","cloneDeep","setState","setHoleWon","className","p","i","setPlayerName","incrementPlayerScore","decrementPlayerScore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","onBeforeunload","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.febbde2c.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap'\n\nexport default class HoleScore extends React.Component {\n  render() {\n    const color = this.props.holeWon ? '#4c4' : '#fff'\n    const fontWeight = this.props.holeWon ? 'bold' : 'normal'\n    return (\n      <div style={{color: color, fontWeight: fontWeight}}>\n        {this.props.score}&nbsp;&nbsp;\n        <Button style={{margin: '2px', width: '30px'}} size=\"sm\" disabled={this.props.score < 1} onClick={this.props.decrement}>-</Button>\n        <Button style={{margin: '2px', width: '30px'}} size=\"sm\" onClick={this.props.increment}>+</Button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Button } from 'react-bootstrap'\nimport { sum } from 'lodash'\n\nimport HoleScore from './HoleScore'\n\nexport default class Player extends React.Component {\n  promptRename() {\n    let newName = prompt('New player name:')\n    this.props.setName(newName)\n  }\n\n  render() {\n    let totalScore = sum(Object.values(this.props.player.scores))\n    let holesWon = this.props.player.holesWon.length\n\n    return (\n      <span style={{margin: '10px'}}>\n        <Button style={{width: '100%'}} onClick={this.promptRename.bind(this)}>{this.props.player.name}</Button>\n        <br /><br />\n        {Object.keys(this.props.player.scores).map(hole => <HoleScore holeWon={this.props.player.holesWon.includes(hole)} key={hole} hole={hole} score={this.props.player.scores[hole]} increment={() => this.props.incrementScore(hole)} decrement={() => this.props.decrementScore(hole)} />)}\n        {totalScore}<br />\n        {holesWon}\n      </span>\n    );\n  }\n}\n","import React from 'react';\nimport { Button } from 'react-bootstrap'\n\nexport default class Holes extends React.Component {\n  render() {\n    return (\n      <span style={{paddingRight: '16px'}}>\n        <Button disabled={true}>#</Button>\n        <br /><br />\n        <Button style={{margin: '2px'}} size=\"sm\">1</Button><br />\n        <Button style={{margin: '2px'}} size=\"sm\">2</Button><br />\n        <Button style={{margin: '2px'}} size=\"sm\">3</Button><br />\n        <Button style={{margin: '2px'}} size=\"sm\">4</Button><br />\n        <Button style={{margin: '2px'}} size=\"sm\">5</Button><br />\n        <Button style={{margin: '2px'}} size=\"sm\">6</Button><br />\n        <Button style={{margin: '2px'}} size=\"sm\">7</Button><br />\n        <Button style={{margin: '2px'}} size=\"sm\">8</Button><br />\n        <Button style={{margin: '2px'}} size=\"sm\">9</Button><br />\n        stroke<br />\n        match\n      </span>\n    );\n  }\n}\n","import React from 'react';\nimport {cloneDeep, remove} from 'lodash';\nimport './App.css';\n\nimport Player from './Player'\nimport Holes from './Holes'\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: [\n        {name: \"Bartek\", holesWon: [], scores: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}},\n        {name: \"Monika\", holesWon: [], scores: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}}\n      ]\n    }\n  }\n\n  setHoleWon(hole, newState) {\n    remove(newState.players[0].holesWon, n => parseInt(n) === parseInt(hole))\n    remove(newState.players[1].holesWon, n => parseInt(n) === parseInt(hole))\n    if(newState.players[0].scores[hole] > newState.players[1].scores[hole]) {\n      if(!newState.players[1].holesWon.includes(hole)) {\n        newState.players[1].holesWon.push(hole)\n      }\n    }\n    if(newState.players[0].scores[hole] < newState.players[1].scores[hole]) {\n      if(!newState.players[0].holesWon.includes(hole)) {\n        newState.players[0].holesWon.push(hole)\n      }\n    }\n  }\n\n  setPlayerName(index, newName) {\n    let newState = cloneDeep(this.state)\n    newState.players[index].name = newName\n    this.setState(newState)\n  }\n\n  incrementPlayerScore(index, hole) {\n    let newState = cloneDeep(this.state)\n    newState.players[index].scores[hole] += 1\n    this.setHoleWon(hole, newState)\n    this.setState(newState)\n  }\n\n  decrementPlayerScore(index, hole) {\n    let newState = cloneDeep(this.state)\n    if(newState.players[index].scores[hole] === 0) {\n      return\n    }\n    newState.players[index].scores[hole] -= 1\n    this.setHoleWon(hole, newState)\n    this.setState(newState)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Holes />\n        {this.state.players.map((p, i) => <Player key={i} player={p} setName={this.setPlayerName.bind(this, i)} incrementScore={this.incrementPlayerScore.bind(this, i)} decrementScore={this.decrementPlayerScore.bind(this, i)} />)}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Beforeunload } from 'react-beforeunload';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Beforeunload onBeforeunload={() => 'Scores will be lost if you leave!'}>\n      <App />\n    </Beforeunload>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}